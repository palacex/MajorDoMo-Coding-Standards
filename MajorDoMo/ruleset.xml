<?xml version="1.0"?>
<ruleset name="MajorDoMo">
   <description>A MajorDoMo coding standard.</description>
   
   <exclude-pattern>*/.git/*</exclude-pattern>
   <exclude-pattern>*/cached/*</exclude-pattern>
   <exclude-pattern>*/debmes/*</exclude-pattern>
   <exclude-pattern>*/doc/*</exclude-pattern>
   
   <!-- #no-shorthand-php-tags -->
	<rule ref="Generic.PHP.DisallowShortOpenTag"/>
   <!-- Error Control Operator @ not allowed -->
   <rule ref="Generic.PHP.NoSilencedErrors" />
   <rule ref="Generic.PHP.Syntax"/>
   
   <!-- only one Class or Interface Declaration per File -->
   <rule ref="Generic.Files.OneClassPerFile"/>
   <rule ref="Generic.Files.OneInterfacePerFile"/>
   <!-- PHP code MUST use only UTF-8 without BOM. -->
   <rule ref="Generic.Files.ByteOrderMark"/>
   <!-- PHP files should contain an empty line at the end of the file -->
   <rule ref="Generic.Files.EndFileNewline"/>
   
   <rule ref="Generic.Files.LineLength.MaxExceeded">
      <message>Line contains %2$s chars, which is more than the limit of %1$s</message>
   </rule>
   <rule ref="Generic.Files.LineLength.TooLong">
      <message>Line longer than %s characters; contains %s characters</message>
   </rule>
 
   <rule ref="Generic.Files.LineLength">
      <properties>
         <property name="lineLimit" value="120"/>
         <property name="absoluteLineLimit" value="160"/>
      </properties>
   </rule>
 
   <!-- All PHP files MUST use the Unix LF (linefeed) line ending. -->
   <rule ref="Generic.Files.LineEndings">
      <properties>
         <property name="eolChar" value="\n"/>
      </properties>
   </rule>
 
   <!-- There MUST NOT be trailing whitespace at the end of non-blank lines. -->
   <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
      <properties>
         <property name="ignoreBlankLines" value="true"/>
      </properties>
   </rule>
   <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
      <severity>0</severity>
   </rule>
   <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
      <severity>0</severity>
   </rule>
   <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
      <severity>0</severity>
   </rule>
   
   <!-- There MUST NOT be more than one statement per line. -->
   <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
   <rule ref="Generic.Formatting.MultipleStatementAlignment"/>
 
   <!-- 2.4 Indenting -->
   <!-- Code MUST use an indent of 3 spaces, and MUST NOT use tabs for indenting. -->
   <rule ref="Generic.WhiteSpace.ScopeIndent">
      <properties>
         <property name="indent" type="int" value="3" />
         <property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
      </properties>
   </rule>
   <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
   
   <!-- 2.5 Keywords and True/False/Null -->
   <!-- PHP keywords MUST be in lower case. -->
   <rule ref="Generic.PHP.LowerCaseKeyword"/>
   <!-- The PHP constants true, false, and null MUST be in lower case. -->
   <rule ref="Generic.PHP.LowerCaseConstant"/>
   <!-- Check for Usage of deprecated Function in current PHP Version -->
   <rule ref="Generic.PHP.DeprecatedFunctions"/>

   <!-- 4.3 Methods -->
   <!-- Visibility MUST be declared on all methods. -->
   <rule ref="Squiz.Scope.MethodScope"/>
   <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
   <rule ref="Squiz.Scope.MemberVarScope"/>
   
   
   <!-- Method names MUST NOT be declared with a space after the method name. The opening brace MUST go on its own line, and the closing brace MUST go on the next line following the body. There MUST NOT be a space after the opening parenthesis, and there MUST NOT be a space before the closing parenthesis. -->
   <rule ref="Squiz.Functions.FunctionDeclaration"/>
   <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

   <!-- 4.4 Method Arguments -->
   <!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
   <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
      <properties>
         <property name="equalsSpacing" value="1"/>
      </properties>
   </rule>
   
   <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
      <severity>0</severity>
   </rule>
 
   <!-- Brace on new line -->
   <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>
   
   <!-- Detects empty statement. -->
   <rule ref="Generic.CodeAnalysis.EmptyStatement"/>
   <!-- Detects for-loops that use a function call in the test expression. -->
   <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
   <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
   <!-- Detects incrementer jumbling ($i,$j,$k...) in for loops. -->
   <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
   <!-- Detects If Statements with single true/false values and no condition -->
   <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
   <!-- Detects unnecessary final modifiers inside of final classes. -->
   <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
   <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
   <!-- Detects unnecessary overriden methods that simply call their parent. -->
   <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
   
   <!-- PHP constructor MUST be named __construct -->
   <rule ref="Generic.NamingConventions.ConstructorName"/>
   <!-- PHP constants MUST be in upper case -->
   <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
   
   <!-- Checks Usage of Increment/Decrement Operators, i.e. $a -= 1; -->
   <rule ref="Squiz.Operators.IncrementDecrementUsage"/>
   <!-- Checks syntactical Usage of Logical Operators in Conditions -->
   <rule ref="Squiz.Operators.ValidLogicalOperators"/>
   <!-- Correct Usage of this in Static Members -->
   <rule ref="Squiz.Scope.StaticThisUsage"/>
   <!-- Correct Usage of echo and Formatting of strings to be echoed -->
   <rule ref="Squiz.Strings.EchoedStrings"/>
   <!-- Checks Spacing around Logical Operators in Conditions -->
   <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
   <rule ref="Squiz.WhiteSpace.OperatorSpacing" />
   <!-- Show Warnings on Discouraged Functions like error_log, print_r and var_dump -->
   <rule ref="Squiz.PHP.DiscouragedFunctions">
      <severity>0</severity>
   </rule>
   <!-- Checks for Code that will never be Executed by bad Design -->
   <rule ref="Squiz.PHP.NonExecutableCode"/>
   <!-- Class names MUST be declared in StudlyCaps. -->
   <rule ref="Squiz.Classes.ValidClassName"/>
   
   <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
		<severity>1</severity>
	</rule>
   
   <!-- Concatenation operator should be wrapped with one space. -->
   <rule ref="Squiz.Strings.ConcatenationSpacing">
      <properties>
         <property name="spacing" value="1"/>
      </properties>
   </rule>
   <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>
   
   <rule ref="Pear.Commenting.ClassComment" />
   <rule ref="Pear.Commenting.FunctionComment" />
   <rule ref="Pear.Commenting.InlineComment" />
   <rule ref="MajorDoMo.ControlStructures.AllmanControlSignature" />
</ruleset>